// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    email,
    username,
    password_hash,
    bio,
    image_url
)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, username, email, password_hash, bio, image_url
`

type CreateUserParams struct {
	ID           string
	Email        string
	Username     string
	PasswordHash string
	Bio          sql.NullString
	ImageUrl     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.Bio,
		arg.ImageUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ImageUrl,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, bio, password_hash, image_url
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID           string
	Email        string
	Username     string
	Bio          sql.NullString
	PasswordHash string
	ImageUrl     sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Bio,
		&i.PasswordHash,
		&i.ImageUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, bio, password_hash, image_url
FROM users
WHERE id = ?
`

type GetUserByIdRow struct {
	ID           string
	Email        string
	Username     string
	Bio          sql.NullString
	PasswordHash string
	ImageUrl     sql.NullString
}

func (q *Queries) GetUserById(ctx context.Context, id string) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Bio,
		&i.PasswordHash,
		&i.ImageUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    email = COALESCE(?1, email),
    password_hash = COALESCE(?2, password_hash),
    bio = COALESCE(?3, bio),
    image_url = COALESCE(?4, image_url)
WHERE id = ?5
RETURNING id, username, email, password_hash, bio, image_url
`

type UpdateUserParams struct {
	Email        sql.NullString
	PasswordHash sql.NullString
	Bio          sql.NullString
	ImageUrl     sql.NullString
	ID           string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.ImageUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ImageUrl,
	)
	return i, err
}
