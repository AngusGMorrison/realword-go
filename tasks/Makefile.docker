.PHONY: docker

## Build the production Docker image.
docker/build:
	docker build \
	--tag ${REALWORLD_IMAGE_NAME} \
	--build-arg certs_dir=${REALWORLD_CERTS_DIR} \
	--build-arg goarch=${REALWORLD_GOARCH} \
	--build-arg goos=${REALWORLD_GOOS} \
	--build-arg port=${REALWORLD_PORT} \
	--build-arg user=${REALWORLD_USER} \
	--build-arg volume_mount_path=${REALWORLD_VOLUME_MOUNT_PATH} \
	--build-arg workdir=${REALWORLD_WORKDIR} \
	.

## Create the persistence volume for the application.
docker/create_volume:
	docker volume create ${REALWORLD_VOLUME_NAME}

## Run the Docker image interactively.
docker/run: docker/create_volume
	docker run \
	--interactive \
	--rm \
	--name=${REALWORLD_CONTAINER_NAME} \
	--env-file .env \
	--publish ${REALWORLD_PORT}:${REALWORLD_PORT} \
	--mount type=volume,source=${REALWORLD_VOLUME_NAME},destination=${REALWORLD_VOLUME_MOUNT_PATH} \
	realworld

## Run the app in a container with live reloading.
docker/live: docker/create_volume
	docker run \
	--interactive \
	--rm \
	--workdir ${REALWORLD_WORKDIR} \
	--env air_wd=${REALWORLD_WORKDIR} \
	--env GOFLAGS=-buildvcs=false \
	--env-file .env \
	--mount type=bind,source=$(shell pwd),destination=${REALWORLD_WORKDIR} \
	--mount type=volume,source=${REALWORLD_VOLUME_NAME},destination=${REALWORLD_VOLUME_MOUNT_PATH} \
	--publish ${REALWORLD_PORT}:${REALWORLD_PORT} \
	cosmtrek/air \
	-c ${REALWORLD_WORKDIR}/.air.toml
